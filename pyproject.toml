[project]
name = "pathpyG"
authors = [
    { name = "Ingo Scholtes", email = "ingo.scholtes@uni-wuerzburg.de" },
    { name = "JÃ¼rgen Hackl", email = "hackl@princeton.edu" },
]
description = "GPU-accelerated Next-Generation Network Analytics and Graph Learning for Time Series Data on Complex Networks."
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Environment :: GPU :: NVIDIA CUDA :: 11.7",
    "Environment :: GPU :: NVIDIA CUDA :: 11.8",
]
requires-python = ">=3.10" # We are using `match` statements
dynamic = ["version"]
dependencies = [
    'singledispatchmethod', # Adds decorator that allows to use different methods for different types of arguments (similar to method overloading in Java)
    'zstandard',            # Compression library
    'numpy',                # Numerical computing library
    'scipy',                # Scientific computing library
    'scikit-learn',         # Machine learning library
    'pandas',               # Data analysis library
    'matplotlib',           # Plotting library
    'seaborn',              # High-level plotting library
    "jupyter",           # To run the tutorial notebooks
]

[project.optional-dependencies]
test = [
    "pytest",      # Testing framework
    "pytest-cov",  # Code coverage plugin for pytest
    "pytest-mock", # Mocking plugin for pytest
    "pytest-benchmark", # Benchmarking plugin for pytest
]

dev = [
    "flake8",            # Linter
    "flake8-pyproject",  # Enables flake8 to read pyproject.toml
    "flake8-bugbear",    # Additional flake8 rules to find common bugs
    "pylint",            # Another linter with mostly different rules
    "black",             # Code formatter
    "pre-commit",        # Python package to enable GitHub pre-commit hooks
    "pathpy2",           # Old pathpy version for comparisons
    "mypy",              # Static type checker
]

doc = [
    "mkdocs",                                    # Documentation generator
    "mkdocs-material",                           # Theme for mkdocs
    "mkdocstrings",                              # Plugin to generate documentation from docstrings
    "mkdocstrings-python",                       # Python language handler for mkdocstrings
    "markdown-exec",                             # Plugin to execute code in markdown files
    "mkdocs-gen-files",                          # Plugin to move python files to documentation automatically
    "mkdocs-literate-nav",                       # Plugin to add navigation for API reference
    "mkdocs-section-index",                      # For better navigation in API reference
    "mkdocs-jupyter",                            # Plugin to include Jupyter notebooks in documentation
    "mkdocs-git-revision-date-localized-plugin", # Plugin to add date of last update to documentation
    "mike"                                       # Tool for versioning the documentation
]

[project.urls]
Documentation = "https://www.pathpy.net"
Source = "https://github.com/pathpy/pathpyG"
Tracker = "https://github.com/pathpy/pathpyG/issues"

########################################################################################
########################### Build system configuration #################################
########################################################################################

[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[tool.flit.module]
name = "pathpyG"

########################################################################################
############################# Test configuration #######################################
########################################################################################

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = "tests"
markers = [
    "benchmark: marks tests as benchmarking tests (deselect with '-m \"not benchmark\"')"
]
addopts = "--cov=src -m \"not benchmark\""

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 65
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug",
    "if settings.DEBUG",
    "if TYPE_CHECKING",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
skip_covered = true

########################################################################################
############################# Linting configuration ####################################
########################################################################################

[tool.flake8] # Linter and code style checker
max-line-length = 120
extend-ignore = "E203"                # whitespace before ':' conflicts with black
per-file-ignores = "__init__.py:F401" # Ignore unused imports in __init__.py files

[tool.pylint.format] # Linter
max-line-length = 120
# Disable information about: Unnecessary "else" after "return", remove the "else" and de-indent the code inside 
disable = "R1705"

[tool.pyright]
reportGeneralTypeIssues = false

[tool.mypy] # Static type checker
check_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]] # Disable mypy for the dir `tests/`
module = "tests.*"
ignore_errors = true

########################################################################################
############################# Formatting configuration #################################
########################################################################################

[tool.isort] # Sorts imports
profile = "black"
skip = [".gitignore", "__init__.py"]

[tool.black] # Code formatter
line-length = 120
target-version = ["py38", "py39", "py310"]
