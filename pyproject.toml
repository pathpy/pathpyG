[project]
name = "pathpyG"
authors = [
    { name = "Ingo Scholtes", email = "ingo.scholtes@uni-wuerzburg.de" },
    { name = "JÃ¼rgen Hackl", email = "hackl@princeton.edu" },
]
description = "GPU-accelerated Next-Generation Network Analytics and Graph Learning for Time Series Data on Complex Networks."
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Environment :: GPU :: NVIDIA CUDA :: 11.7",
    "Environment :: GPU :: NVIDIA CUDA :: 11.8",
]
requires-python = ">=3.10" # We are using `match` statements
version = "0.2.0"
dependencies = [
    'singledispatchmethod', # Adds decorator that allows to use different methods for different types of arguments (similar to method overloading in Java)
    'zstandard', # Compression library
    'numpy', # Numerical computing library
    'scipy', # Scientific computing library
    'scikit-learn', # Machine learning library
    'pandas', # Data analysis library
    'matplotlib', # Plotting library
    'seaborn', # High-level plotting library
    'jupyter', # To run the tutorial notebooks
    'torch_geometric', # PyTorch Geometric library for graph deep learning
    "networkx", # NetworkX for basic network analysis and visualisation
]

[project.optional-dependencies]
vis = [
    "manim", # Animation engine
]

cu129 = [
  "torch==2.8.0",         # PyTorch for deep learning
  "pyg_lib",              # PyTorch Geometric library for efficient graph operations
  "torch_scatter",        # PyTorch Geometric library for scatter operations
  "torch_sparse",         # PyTorch Geometric library for sparse matrix operations
  "torch_cluster",        # PyTorch Geometric library for clustering operations
  "torch_spline_conv",    # PyTorch Geometric library for spline convolution
]

cpu = [
  "torch==2.8.0",         # PyTorch for deep learning
  "pyg_lib",              # PyTorch Geometric library for efficient graph operations
  "torch_scatter",        # PyTorch Geometric library for scatter operations
  "torch_sparse",         # PyTorch Geometric library for sparse matrix operations
  "torch_cluster",        # PyTorch Geometric library for clustering operations
  "torch_spline_conv",    # PyTorch Geometric library for spline convolution
]

[dependency-groups]
test = [
    "pytest",      # Testing framework
    "pytest-cov",  # Code coverage plugin for pytest
    "pytest-mock", # Mocking plugin for pytest
    "pytest-benchmark", # Benchmarking plugin for pytest
]

dev = [
    "ruff",  # Linter and code formatter
    "mypy",  # Static type checker
]

doc = [
    "mkdocs",                                    # Documentation generator
    "mkdocs-material",                           # Theme for mkdocs
    "mkdocstrings",                              # Plugin to generate documentation from docstrings
    "mkdocstrings-python",                       # Python language handler for mkdocstrings
    "markdown-exec",                             # Plugin to execute code in markdown files
    "mkdocs-gen-files",                          # Plugin to move python files to documentation automatically
    "mkdocs-literate-nav",                       # Plugin to add navigation for API reference
    "mkdocs-section-index",                      # For better navigation in API reference
    "mkdocs-jupyter",                            # Plugin to include Jupyter notebooks in documentation
    "mkdocs-git-revision-date-localized-plugin", # Plugin to add date of last update to documentation
    "mike"                                       # Tool for versioning the documentation
]

[project.urls]
Documentation = "https://www.pathpy.net"
Source = "https://github.com/pathpy/pathpyG"
Tracker = "https://github.com/pathpy/pathpyG/issues"


########################################################################################
############################## Package configuration ###################################
########################################################################################
[tool.uv]
default-groups = ["dev", "test", "doc"]
conflicts = [
    [
      { extra = "cpu" },
      { extra = "cu129" },
    ],
]

[tool.uv.sources]
torch = [
  { index = "torch-cu129", extra = "cu129" },
  { index = "torch-cpu", extra = "cpu" },
]
pyg_lib = [
  { index = "pyg-cu129", extra = "cu129" },
  { index = "pyg-cpu", extra = "cpu" },
]
torch_scatter = [
  { index = "pyg-cu129", extra = "cu129" },
  { index = "pyg-cpu", extra = "cpu" },
]
torch_sparse = [
  { index = "pyg-cu129", extra = "cu129" },
  { index = "pyg-cpu", extra = "cpu" },
]
torch_cluster = [
  { index = "pyg-cu129", extra = "cu129" },
  { index = "pyg-cpu", extra = "cpu" },
]
torch_spline_conv = [
  { index = "pyg-cu129", extra = "cu129" },
  { index = "pyg-cpu", extra = "cpu" },
]

[[tool.uv.index]]
name = "torch-cu129"
url = "https://download.pytorch.org/whl/cu129"
explicit = true

[[tool.uv.index]]
name = "torch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pyg-cpu"
url = "https://data.pyg.org/whl/torch-2.8.0+cpu.html"
explicit = true
format = "flat"

[[tool.uv.index]]
name = "pyg-cu129"
url = "https://data.pyg.org/whl/torch-2.8.0+cu129.html"
explicit = true
format = "flat"

########################################################################################
########################### Build system configuration #################################
########################################################################################

[build-system]
requires = ["uv_build>=0.8.22,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "pathpyG"

########################################################################################
############################# Test configuration #######################################
########################################################################################

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = "tests"
markers = [
    "benchmark: marks tests as benchmarking tests (deselect with '-m \"not benchmark\"')",
    "gpu: marks tests that require GPU support (deselect with '-m \"not gpu\"')"
]
addopts = "--cov=src -m \"not benchmark and not gpu\""

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 65
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug",
    "if settings.DEBUG",
    "if TYPE_CHECKING",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
skip_covered = true

########################################################################################
############################# Linting configuration ####################################
########################################################################################

[tool.ruff]
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "D", "I"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy] # Static type checker
check_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]] # Disable mypy for the dir `tests/`
module = "tests.*"
ignore_errors = true
