[project]
name = "pathpyG"
authors = [
    { name = "Ingo Scholtes", email = "ingo.scholtes@uni-wuerzburg.de" },
    { name = "JÃ¼rgen Hackl", email = "hackl@princeton.edu" },
]
description = "An Open Source package providing higher-order analytics and learning for time series data on graphs."
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Environment :: GPU :: NVIDIA CUDA :: 11.7",
    "Environment :: GPU :: NVIDIA CUDA :: 11.8",
]
requires-python = ">=3.8" # PyTorch Geometric requires Python 3.8 or higher
dynamic = ["version"]
dependencies = [
    'singledispatchmethod', # Adds decorator that allows to use different methods for different types of arguments (similar to method overloading in Java)
    'zstandard',            # Compression library
    'numpy',                # Numerical computing library
    'scipy',                # Scientific computing library
    'scikit-learn',         # Machine learning library
    'pandas',               # Data analysis library
    'matplotlib',           # Plotting library
    'seaborn',              # High-level plotting library
]

[project.optional-dependencies]
test = [
    "pytest",      # Testing framework
    "pytest-cov",  # Code coverage plugin for pytest
    "pytest-mock", # Mocking plugin for pytest
]

dev = [
    "flake8",            # Linter
    "flake8-pyproject",  # Enables flake8 to read pyproject.toml
    "flake8-docstrings", # Docstring style checker
    "flake8-bugbear",    # Additional flake8 rules to find common bugs
    "pylint",            # Another linter with mostly different rules
    "black",             # Code formatter
    "pre-commit",        # Python package to enable GitHub pre-commit hooks
    "pathpy2",           # Old pathpy version for comparisons
    "pyright",           # Static type checker
    "mypy",              # Static type checker
    "jupyter",           # To run the tutorial notebooks
]

doc = [
    "mkdocs",                                    # Documentation generator
    "mkdocs-material",                           # Theme for mkdocs
    "mkdocstrings",                              # Plugin to generate documentation from docstrings
    "mkdocstrings-python",                       # Python language handler for mkdocstrings
    "mkdocs-gen-files",                          # Plugin to move python files to documentation automatically
    "mkdocs-literate-nav",                       # Plugin to add navigation for API reference
    "mkdocs-section-index",                      # For better navigation in API reference
    "mkdocs-jupyter",                            # Plugin to include Jupyter notebooks in documentation
    "mkdocs-git-revision-date-localized-plugin", # Plugin to add date of last update to documentation
    "mike"                                       # Tool for versioning the documentation
]

[project.urls]
Documentation = "https://github.com/pathpy/pathpyG/blob/main/README.md" # TODO: Update to official documentation
Source = "https://github.com/pathpy/pathpyG"
Tracker = "https://github.com/pathpy/pathpyG/issues"

########################################################################################
########################### Build system configuration #################################
########################################################################################

[build-system]
requires = ["flit"]
build-backend = "flit.buildapi"

[tool.flit.module]
name = "pathpyG"

########################################################################################
############################# Test configuration #######################################
########################################################################################

[tool.pytest.ini_options] # TODO: 10. Create pytest setup
pythonpath = ["src"]
testpaths = "tests"
addopts = "--cov=src"

[tool.coverage.run] # TODO: 10. Create pytest setup
branch = true

[tool.coverage.report] # TODO: 10. Create pytest setup
fail_under = 25
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug",
    "if settings.DEBUG",
    "if TYPE_CHECKING",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

########################################################################################
############################# Linting configuration ####################################
########################################################################################

[tool.flake8] # Linter and code style checker
max-line-length = 88
extend-ignore = "E203"                # whitespace before ':' conflicts with black
per-file-ignores = "__init__.py:F401" # Ignore unused imports in __init__.py files

[tool.pylint.format] # Linter
max-line-length = 88

[tool.pyright] # Static type checker
include = ["src"]

[tool.mypy] # Static type checker
modules = ["pathpyG"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true

########################################################################################
############################# Formatting configuration #################################
########################################################################################

[tool.isort] # Sorts imports
profile = "black"
skip = [".gitignore", "__init__.py"]

[tool.black] # Code formatter
line-length = 88
target-version = ["py38", "py39", "py310"]
